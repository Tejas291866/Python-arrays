# -*- coding: utf-8 -*-
"""arrays.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13nWmS0BIY_IeYJ4BYgxlvtK1Zsq3ON5S
"""

def displayminmax(list1):
  max=list1[0]
  min=list1[0]
  for i in range(0,len(list1)):
    if list1[i]<min:
      min=list1[i]
    if list1[i]>max:
      max=list1[i]
  print("max= ",max)
  print("min= ",min)

list1=[9, 2, 5, 1, 7, 4, 10, 3, 6, 8]
displayminmax(list1)

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i  # Return the index where the target is found
    return -1  # Return -1 if the target is not found

# Example usage
numbers = [5, 2, 8, 12, 3, 7, 10]
target = 7

index = linear_search(numbers, target)

if index != -1:
    print(f"Target {target} found at index {index}")
else:
    print(f"Target {target} not found")

def binary_search(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            return mid  # Return the index where the target is found
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1  # Return -1 if the target is not found

# Example usage
numbers = [2, 5, 7, 9, 12, 15, 18, 20]
target = 7

index = binary_search(numbers, target)

if index != -1:
    print(f"Target {target} found at index {index}")
else:
    print(f"Target {target} not found")

list1 = [0, 1]

def fibonacci():
    for i in range(2, 100):
        a = list1[i-1] + list1[i-2]
        list1.append(a)
    print(list1)

fibonacci()